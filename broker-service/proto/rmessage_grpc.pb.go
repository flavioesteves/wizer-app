// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: rmessage.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RMessageService_SendMessage_FullMethodName = "/rmessage.RMessageService/SendMessage"
)

// RMessageServiceClient is the client API for RMessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RMessageServiceClient interface {
	SendMessage(ctx context.Context, in *RMessageRequest, opts ...grpc.CallOption) (*RMessageResponse, error)
}

type rMessageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRMessageServiceClient(cc grpc.ClientConnInterface) RMessageServiceClient {
	return &rMessageServiceClient{cc}
}

func (c *rMessageServiceClient) SendMessage(ctx context.Context, in *RMessageRequest, opts ...grpc.CallOption) (*RMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RMessageResponse)
	err := c.cc.Invoke(ctx, RMessageService_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RMessageServiceServer is the server API for RMessageService service.
// All implementations must embed UnimplementedRMessageServiceServer
// for forward compatibility
type RMessageServiceServer interface {
	SendMessage(context.Context, *RMessageRequest) (*RMessageResponse, error)
	mustEmbedUnimplementedRMessageServiceServer()
}

// UnimplementedRMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRMessageServiceServer struct {
}

func (UnimplementedRMessageServiceServer) SendMessage(context.Context, *RMessageRequest) (*RMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedRMessageServiceServer) mustEmbedUnimplementedRMessageServiceServer() {}

// UnsafeRMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RMessageServiceServer will
// result in compilation errors.
type UnsafeRMessageServiceServer interface {
	mustEmbedUnimplementedRMessageServiceServer()
}

func RegisterRMessageServiceServer(s grpc.ServiceRegistrar, srv RMessageServiceServer) {
	s.RegisterService(&RMessageService_ServiceDesc, srv)
}

func _RMessageService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RMessageServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RMessageService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RMessageServiceServer).SendMessage(ctx, req.(*RMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RMessageService_ServiceDesc is the grpc.ServiceDesc for RMessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RMessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rmessage.RMessageService",
	HandlerType: (*RMessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _RMessageService_SendMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rmessage.proto",
}
